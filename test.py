import google.generativeai as genai
import json
import os

def chat_gemini_with_history(user_message, history_file="chat_history.json"):
    """
    G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini API v√† l∆∞u l·∫°i l·ªãch s·ª≠ chat.

    Args:
        user_message (str): Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng.
        history_file (str, optional): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file l∆∞u l·ªãch s·ª≠ chat.
                                       M·∫∑c ƒë·ªãnh l√† "chat_history.json".

    Returns:
        str: Ph·∫£n h·ªìi t·ª´ Gemini API.
    """
    # C·∫•u h√¨nh API key (B·∫°n n√™n thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_API_KEY thay v√¨ hardcode)
    genai.configure(api_key="AIzaSyAUh7P-Zx7TegzSQ31CkpTEWDZzf9_7kcY")

    # Ch·ªçn model Gemini (·ªü ƒë√¢y d√πng 'gemini-pro')
    model = genai.GenerativeModel('gemini-2.0-flash-thinking-exp-01-21')

    history = []
    if os.path.exists(history_file):
        try:
            with open(history_file, 'r') as f:
                history_data = json.load(f)
                # T·∫£i l·ªãch s·ª≠ t·ª´ d·ªØ li·ªáu JSON dictionary (ƒë√£ l√† ƒë·ªãnh d·∫°ng mong mu·ªën)
                history = history_data # S·ª≠ d·ª•ng tr·ª±c ti·∫øp history_data
        except Exception as e:
            print(f"L·ªói khi t·∫£i l·ªãch s·ª≠ chat: {e}")
            history = []

    chat = model.start_chat(history [parts {text: "hello"} role: "user", parts {text: "Hello there! How can I help you today? üòä"} role: "model"]) # S·ª≠ d·ª•ng history l√† list c√°c dictionaries

    response = chat.send_message(user_message)

    updated_history_raw = chat.history # L·∫•y history (c√≥ th·ªÉ v·∫´n l√† list c√°c ƒë·ªëi t∆∞·ª£ng Content n·ªôi b·ªô)
    updated_history_to_save = []


    try:
        with open(history_file, 'w') as f:
            json.dump(updated_history_to_save, f, indent=4) # L∆∞u l·ªãch s·ª≠ d∆∞·ªõi d·∫°ng list dictionary JSON
    except Exception as e:
        print(f"L·ªói khi l∆∞u l·ªãch s·ª≠ chat: {e}")

    return response.text

# --- V√≠ d·ª• s·ª≠ d·ª•ng ---
if __name__ == "__main__":
    # ƒê·∫£m b·∫£o b·∫°n ƒë√£ thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng GOOGLE_API_KEY ho·∫∑c thay th·∫ø tr·ª±c ti·∫øp API key v√†o d√≤ng d∆∞·ªõi
    # os.environ["GOOGLE_API_KEY"] = "YOUR_API_KEY" # KH√îNG N√äN HARDCODE API KEY TR·ª∞C TI·∫æP

    # L·∫ßn chat ƒë·∫ßu ti√™n (l·ªãch s·ª≠ s·∫Ω ƒë∆∞·ª£c t·∫°o m·ªõi)
    response1 = chat_gemini_with_history("Xin ch√†o Gemini!")
    print("Gemini (l·∫ßn 1):", response1)

    # L·∫ßn chat th·ª© hai (l·ªãch s·ª≠ t·ª´ file 'chat_history.json' s·∫Ω ƒë∆∞·ª£c t·∫£i v√† ti·∫øp t·ª•c)
    response2 = chat_gemini_with_history("B·∫°n c√≥ nh·ªõ t√¥i ƒë√£ n√≥i g√¨ tr∆∞·ªõc ƒë√≥ kh√¥ng?", history_file="chat_history.json")
    print("Gemini (l·∫ßn 2):", response2)

    # L·∫ßn chat th·ª© ba, ti·∫øp t·ª•c s·ª≠ d·ª•ng l·ªãch s·ª≠ c≈©
    response3 = chat_gemini_with_history("H√£y t√≥m t·∫Øt l·∫°i cu·ªôc tr√≤ chuy·ªán c·ªßa ch√∫ng ta.", history_file="chat_history.json")
    print("Gemini (l·∫ßn 3):", response3)